#!/usr/bin/env python3
"""
foobar2000 Directory Monitor for macOS
–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –ø–∞–ø–∫—É ~/Music/Import –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –≤ foobar2000
"""

import os
import sys
import time
import subprocess
from pathlib import Path
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
import logging
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
IMPORT_DIR = Path.home() / "Music" / "Import"
LOG_DIR = Path.home() / "Library" / "foobar2000-v2" / "logs"
LOG_FILE = LOG_DIR / "monitor.log"

# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∞—É–¥–∏–æ—Ñ–æ—Ä–º–∞—Ç—ã
AUDIO_EXTENSIONS = {'.flac', '.mp3', '.wav', '.m4a', '.aac', '.opus', '.ogg', '.wma'}

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
IMPORT_DIR.mkdir(parents=True, exist_ok=True)
LOG_DIR.mkdir(parents=True, exist_ok=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(LOG_FILE, encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger(__name__)

class AudioFileHandler(FileSystemEventHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤"""
    
    def __init__(self):
        self.processed_files = set()
        
    def on_created(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        if event.is_directory:
            return
            
        self.process_file(event.src_path)
    
    def on_moved(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤"""
        if event.is_directory:
            return
            
        self.process_file(event.dest_path)
    
    def process_file(self, file_path):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞"""
        try:
            path = Path(file_path)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
            if path.suffix.lower() not in AUDIO_EXTENSIONS:
                return
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ñ–∞–π–ª —É–∂–µ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª—Å—è
            if str(path) in self.processed_files:
                return
                
            # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞
            self.wait_for_file_complete(path)
            
            if path.exists() and path.is_file():
                logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª: {path.name}")
                
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ foobar2000
                if self.add_to_foobar2000(path):
                    logger.info(f"‚úì –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ foobar2000: {path.name}")
                    self.processed_files.add(str(path))
                else:
                    logger.error(f"‚úó –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ foobar2000: {path.name}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
    
    def wait_for_file_complete(self, file_path, timeout=30):
        """–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞"""
        previous_size = -1
        stable_time = 0
        check_interval = 1
        
        while stable_time < 3:  # –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
            if not file_path.exists():
                time.sleep(check_interval)
                continue
                
            try:
                current_size = file_path.stat().st_size
                
                if current_size == previous_size:
                    stable_time += check_interval
                else:
                    stable_time = 0
                    previous_size = current_size
                
                time.sleep(check_interval)
                timeout -= check_interval
                
                if timeout <= 0:
                    logger.warning(f"–¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏: {file_path.name}")
                    break
                    
            except (OSError, IOError) as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–∞ {file_path.name}: {e}")
                time.sleep(check_interval)
                timeout -= check_interval
                
                if timeout <= 0:
                    break
    
    def add_to_foobar2000(self, file_path):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ foobar2000 —á–µ—Ä–µ–∑ AppleScript"""
        try:
            applescript_cmd = f'''
            tell application "foobar2000"
                open POSIX file "{file_path}"
            end tell
            '''
            
            result = subprocess.run(
                ['osascript', '-e', applescript_cmd],
                capture_output=True,
                text=True,
                timeout=10
            )
            
            return result.returncode == 0
            
        except subprocess.TimeoutExpired:
            logger.error(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –≤ foobar2000: {file_path.name}")
            return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ AppleScript –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ {file_path.name}: {e}")
            return False

def check_foobar2000_running():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ foobar2000 –∑–∞–ø—É—â–µ–Ω"""
    try:
        result = subprocess.run(
            ['pgrep', '-f', 'foobar2000'],
            capture_output=True,
            text=True
        )
        return result.returncode == 0
    except Exception:
        return False

def monitor_directory():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    logger.info(f"=== –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ foobar2000 ===")
    logger.info(f"–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–∞—è –ø–∞–ø–∫–∞: {IMPORT_DIR}")
    logger.info(f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: {', '.join(sorted(AUDIO_EXTENSIONS))}")
    logger.info(f"–õ–æ–≥ —Ñ–∞–π–ª: {LOG_FILE}")
    
    if not IMPORT_DIR.exists():
        logger.error(f"–ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {IMPORT_DIR}")
        sys.exit(1)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ foobar2000
    if not check_foobar2000_running():
        logger.warning("foobar2000 –Ω–µ –∑–∞–ø—É—â–µ–Ω, –Ω–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è")
        logger.info("–§–∞–π–ª—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ foobar2000")
    else:
        logger.info("foobar2000 –æ–±–Ω–∞—Ä—É–∂–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è
    event_handler = AudioFileHandler()
    observer = Observer()
    observer.schedule(event_handler, str(IMPORT_DIR), recursive=True)
    
    try:
        # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        observer.start()
        logger.info("‚úì –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ...")
        for file_path in IMPORT_DIR.rglob('*'):
            if file_path.is_file() and file_path.suffix.lower() in AUDIO_EXTENSIONS:
                logger.info(f"–ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª: {file_path.name}")
                event_handler.process_file(str(file_path))
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        while True:
            time.sleep(1)
            
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è...")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        observer.stop()
        observer.join()
        logger.info("=== –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ===")

def print_status():
    """–ü–µ—á–∞—Ç—å —Å—Ç–∞—Ç—É—Å–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    print("\n" + "="*50)
    print("foobar2000 Directory Monitor –¥–ª—è macOS")
    print("="*50)
    print(f"–ü–∞–ø–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {IMPORT_DIR}")
    print(f"–õ–æ–≥ —Ñ–∞–π–ª: {LOG_FILE}")
    print(f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: {', '.join(sorted(AUDIO_EXTENSIONS))}")
    print(f"foobar2000 –∑–∞–ø—É—â–µ–Ω: {'‚úì' if check_foobar2000_running() else '‚úó'}")
    print("="*50)

if __name__ == "__main__":
    try:
        print_status()
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        try:
            import watchdog
        except ImportError:
            print("\n‚ùå –ú–æ–¥—É–ª—å watchdog –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π: pip3 install --user watchdog")
            sys.exit(1)
        
        monitor_directory()
        
    except KeyboardInterrupt:
        print("\n\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
        sys.exit(0)
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)